name: Unit Test 

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

env:
  MYSQL_USER: test
  MYSQL_PASSWORD: test
  MYSQL_DATABASE: API_francaises_des_dev_test
  MYSQL_PORT: 32001
  MYSQL_HOST: localhost

jobs:
  unit-test:
    name: Unit testing
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.11"]
    steps:
      - name: Check out the repo 
        uses: actions/checkout@v3
        with:
          ref: ${{ github.ref }}
      - name: Starting MySQL docker
        run: docker-compose up -d api-francaises-des-dev-mysql
      - name: Sleep for 30 seconds to wait for MySQL
        uses: jakejarvis/wait-action@master
        with:
          time: '30s'
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
      - name: Create Python venv
        run: |
          python3 -m venv venv
          source venv/bin/activate
      - name: Install dependencies
        run: |
          pip install --upgrade pip
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
      - name: Run unit tests
        run: |
          pytest --doctest-modules --junitxml=junit/test-results-${{ matrix.python-version }}.xml --cov=app --cov-report=xml --cov-report=html
      - name: Upload pytest test results
        uses: actions/upload-artifact@v3
        with:
          name: pytest-results-${{ matrix.python-version }}
          path: junit/test-results-${{ matrix.python-version }}.xml
        # Use always() to always run this step to publish test results when there are test failures
        if: ${{ always() }}